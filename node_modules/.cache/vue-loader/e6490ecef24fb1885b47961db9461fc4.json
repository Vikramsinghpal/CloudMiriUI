{"remainingRequest":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\src\\components\\WhyUs.vue?vue&type=template&id=b32b84f4&","dependencies":[{"path":"E:\\CloudMiriUI\\cloudmiriui\\src\\components\\WhyUs.vue","mtime":1613550333211},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}