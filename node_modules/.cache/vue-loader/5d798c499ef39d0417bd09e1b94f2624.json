{"remainingRequest":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"E:\\CloudMiriUI\\cloudmiriui\\src\\components\\Home.vue","mtime":1612258594736},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQo8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPg0KICAgIDxkaXYgY2xhc3M9ImJhbm5lck1haW4gcm93Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHRleHQtY2VudGVyIj4NCiAgICAgICAgICAgIDxoMT5GZWVsIHRoZSBwb3dlciBvZiBDbG91ZCB3aXRoIFN1cHBvcnQgTXkgQ2xvdWQ8L2gxPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXdzTWFya2V0QmFubmVyQnRuMSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGNvbC1zbS0xMiI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1wYXJ0bmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InVsY2xvdWRwcm9kdWN0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtZm9yPSJjbG91ZFByb2R1Y3RDYXRlZ29yeSBpbiBDbG91ZFByb2R1Y3RDYXRlZ29yaWVzIiA6a2V5PSJjbG91ZFByb2R1Y3RDYXRlZ29yeS5Qcm9kdWN0Q2F0ZWdvcnlJZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjbGljayk9Im9uUHJvZHVjdENhdGVnb3J5Q2xpY2soY2xvdWRQcm9kdWN0Q2F0ZWdvcnkuUHJvZHVjdENhdGVnb3J5SWQpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSgnL2Fzc2V0cy9pbWFnZXMvJyArY2xvdWRQcm9kdWN0Q2F0ZWdvcnkuUHJvZHVjdENhdGVnb3J5SW1hZ2UpIiBhbHQ9Imdvb2dsZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+IA0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KPHNlY3Rpb24gY2xhc3M9ImNsb3VkQXBwIHRleHQtY2VudGVyIGNvbnRhaW5lci1mbHVpZCI+DQogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgPGgyPkNsb3VkIFNlcnZpY2VzPC9oMj4NCiAgICAgICAgPGgzPkNsb3VkIGlzIGFuIEVsZWN0cm9uaWMgRGVtb2NyYWN5PC9oMz4NCiAgICAgICAgPHA+Jm5ic3A7PC9wPg0KICAgICAgICA8cD5DbG91ZCBzZXJ2aWNlcyBpbmNvcnBvcmF0ZXMgdmFyaW91cyBtZXRob2RvbG9naWVzIHN1Y2ggYXMgb24tZGVtYW5kIHByYWN0aWNlcyB2aWEgaW50ZXJuZXQsIG1pZ3JhdGlvbg0KICAgICAgICAgICAgaGFuZGxpbmcgKGNsb3VkLCBkYXRhYmFzZSBldGMuKSwgY29tcHV0aW5nIHBvd2VyIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIHRocm91Z2ggY2xvdWQgY29tcHV0aW5nIHByb3ZpZGVycy4gV2UNCiAgICAgICAgICAgIGFyZSBDbG91ZCBTZXJ2aWNlIFByb3ZpZGVyIGluIFVTQQ0KICAgICAgICAgICAgYW5kIGhhdmUgZ3JlYXQgYW5kIGhpZ2hseSBza2lsbGVkIGV4cGVydHMgdG8gb2ZmZXIgdGhlIGJlc3QgaW4tY2xhc3MgY2xvdWQgc2VydmljZXMNCiAgICAgICAgPC9wPg0KICAgIDwvZGl2Pg0KPC9zZWN0aW9uPg0KPHNlY3Rpb24gY2xhc3M9Ind0V2VEbyB0ZXh0LWNlbnRlciBjb250YWluZXItZmx1aWQiPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIDxoMj5XZSBiZWxpZXZlIGluIG91dGNvbWVzPC9oMj4NCiAgICAgICAgPHA+V2Ugc3RyaXZlIGluIG9mZmVyaW5nIHRoZSBtb3N0IGFnaWxlIGFuZCBoaWdoIHF1YWxpdHkgY2xvdWQgc2VydmljZXMgYW5kIGZvbGxvd2luZyBhcmUgdGhlIHNpZ25pZmljYW50DQogICAgICAgICAgICBzZXJ2aWNlcyBvbiBjbG91ZCB0ZWNobm9sb2d5OjwvcD4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9taWdyYXRpb24iPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImlubkJ4Ij4NCiAgICAgICAgICAgICAgICA8IS0tIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgcm91dGVyTGluaz0iL21hcmtldHBsYWNlL21pZ3JhdGlvbiIgY2xhc3M9ImlubkJ4Ij4gLS0+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uU2VydiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9taWdyYXRlSWNvbi5wbmciIGFsdD0iTWlncmF0aW9uIiAvPjwvaT4gICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8aDM+TWlncmF0aW9uPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+Q2xvdWQgTWlncmF0aW9uIFNlcnZpY2VzIHJlZmVyIHRvIG1vdmluZyBmcm9tIHRyYWRpdGlvbmFsIHNlcnZlciBlbnZpcm9ubWVudHMgdG8gcHJpdmF0ZSwgcHVibGljDQogICAgICAgICAgICAgICAgICAgICAgICBvciBoeWJyaWQgY2xvdWRzIG9mIHRoZWlyIHByZWZlcmVuY2UuPC9wPg0KICAgICAgICAgICAgICAgICA8L2E+PC9yb3V0ZXItbGluaz4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvY29uc3VsdGluZyIgPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImlubkJ4Ij4NCiAgICAgICAgICAgICAgICA8IS0tIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgcm91dGVyTGluaz0iL21hcmtldHBsYWNlL2NvbnN1bHRpbmciIGNsYXNzPSJpbm5CeCI+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvblNlcnYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvY29uc3VsdC5wbmciIGFsdD0iQ29uc3VsdGF0aW9uIiAvPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkNvbnN1bHRpbmc8L2gzPg0KICAgICAgICAgICAgICAgICAgICA8cD5DbG91ZCBDb25zdWx0aW5nIFNlcnZpY2VzIGNhdGVyIHRvIHRoZSBidXNpbmVzcyBuZWVkcyB0byBvZmZlciBjb25zdWx0YXRpb24gaW4gdGhlIGltcGxlbWVudGF0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICBvZiBjbG91ZCBjb21wdXRpbmcuPC9wPg0KICAgICAgICAgICAgICAgIDwvYT48L3JvdXRlci1saW5rPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9kZXBsb3kiID48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiICBjbGFzcz0iaW5uQngiPg0KICAgICAgICAgICAgICAgPCEtLSAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiByb3V0ZXJMaW5rPSIvbWFya2V0cGxhY2UvZGVwbG95bWVudCIgY2xhc3M9ImlubkJ4Ij4gLS0+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uU2VydiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9kZXZlbG9wSWNvbi5wbmciIGFsdD0iRGVwbG95bWVudCIgLz48L2k+DQogICAgICAgICAgICAgICAgICAgIDxoMz5EZXBsb3ltZW50PC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+RGVwbG95bWVudCBpbmNsdWRlcyBhbGwgdGhlIHByb2Nlc3NlcyBlbmdhZ2VkIGluIGdldHRpbmcgbmV3IHNvZnR3YXJlIG9yIGhhcmR3YXJlIHVwIGFuZCBydW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJseSBpbiBpdHMgZW52aXJvbm1lbnQuLjwvcD4NCiAgICAgICAgICAgICAgICA8L2E+PC9yb3V0ZXItbGluaz4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvZGV2b3BzIiA+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iaW5uQngiPg0KICAgICAgICAgICAgICAgIDwhLS0gPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiByb3V0ZXJMaW5rPSIvbWFya2V0cGxhY2UvZGV2b3BzIiBjbGFzcz0iaW5uQngiPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb25TZXJ2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2FuYWx5c2lzSWNvbi5wbmciIGFsdD0iRGV2T3BzIiAvPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPGgzPkRldk9wczwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPkRldk9wcyBpcyB0aGUgYW1hbGdhbWF0aW9uIG9mIGN1bHR1cmFsIHBoaWxvc29waGllcywgcHJhY3RpY2VzLCBhbmQgdG9vbHMgdGhhdCBlbmhhbmNlcyB0aGUNCiAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbuKAmXMgY2FwYWJpbGl0eSB0byBkZWxpdmVyLi48L3A+DQogICAgICAgICAgICAgICAgPC9hPjwvcm91dGVyLWxpbms+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL21hY2hpbmUiID48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJpbm5CeCI+DQogICAgICAgICAgICAgICA8IS0tICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIHJvdXRlckxpbms9Ii9tYXJrZXRwbGFjZS9tYWNoaW5lbGVhcm5pbmciIGNsYXNzPSJpbm5CeCI+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvblNlcnYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvZGlzYXNSZWNvdmVySWNvbi5wbmciIGFsdD0iTWFjaGluZSBMZWFybmluZyIgLz48L2k+DQogICAgICAgICAgICAgICAgICAgIDxoMz5NYWNoaW5lIExlYXJuaW5nPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPHA+TWFjaGluZSBMZWFybmluZyBpcyB0aGUgYXJ0IG9mIGdldHRpbmcgY29tcHV0ZXJzIHRvIGFjdCB3aXRob3V0IGJlaW5nIGV4cGxpY2l0bHkgcHJvZ3JhbW1lZC48L3A+DQogICAgICAgICAgICAgICAgPC9hPjwvcm91dGVyLWxpbms+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3NlcnZpY2VzIiA+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj4NCiAgICAgICAgICAgICAgIDwhLS0gIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgcm91dGVyTGluaz0iL21hcmtldHBsYWNlL3NlcnZpY2VzIiBjbGFzcz0iaW5uQngiPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSA8YSBocmVmPSIvc2VydmljZXMuYXNweCNtb3JlU2VjIiBjbGFzcz0iaW5uQngiPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb25TZXJ2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2Rldk9wdEljb24ucG5nIiBhbHQ9Ik1vcmUiIC8+PC9pPg0KICAgICAgICAgICAgICAgICAgICA8aDM+TW9yZTwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxwPlNvbWUgb3RoZXIgc2VydmljZXMgdGhhdCBhcmUgcHJvdmlkZWQgYnkgdXM6IFNoYXJlcG9pbnQsIERhdGEgTGFrZSwgTW9iaWxlLCBldGMuPC9wPg0KICAgICAgICAgICAgICAgIDwvYT48L3JvdXRlci1saW5rPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgPC9kaXY+DQo8L3NlY3Rpb24+DQoNCg0KPHNlY3Rpb24gY2xhc3M9ImJlbGlldmVNYWluIGNvbnRhaW5lci1mbHVpZCI+DQogICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgYmVsaWV2ZUxlZnRJbWciPg0KICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvaW1hZ2VfbW9uaXRvci5wbmciIGFsdD0iIiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgYmVsUmlnaHQiPg0KICAgICAgICAgICAgPGg0PldlIGtlZXAgb3VyIGN1c3RvbWVycyBpbiBmb2N1cyBhbmQgaW5jcmVhc2UgdGhlaXIgY29tcGV0aXRpdmUgYWR2YW50YWdlIGJ5IGFsaWduaW5nIHN0cmF0ZWd5IHdpdGggcGVvcGxlDQogICAgICAgICAgICAgICAgYW5kIGN1bHR1cmUuIDwvaDQ+DQogICAgICAgICAgICA8cD5Zb3UgY2FuIHRha2UgYSBkZWVwLWRpdmUgaW50byB0aGUgY2FzZXMgdGhhdCB3ZSBzb2x2ZWQgYW5kIHByb3ZpZGVkIHRoZSBiZXN0IHNvbHV0aW9uIG9uIGNsb3VkIHBsYXRmb3JtLg0KICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgPHVsIGNsYXNzPSJiZWxpZXZlTG9nbyI+DQogICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9jYXNlc3R1ZHkiID4NCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiA+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9Hb3NzUlYucG5nIiBhbHQ9Ikdvc3NSViBDYXNlIFN0dWR5IiAvPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvY2FzZXN0dWR5IiA+DQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgcm91dGVyTGluaz0iL21hcmtldHBsYWNlL2Nhc2VzdHVkaWVzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL0NvbWJhTG9nby5wbmciIGFsdD0iQ29tYmEgQ2FzZSBTdHVkeSIgLz48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvY2FzZXN0dWR5IiA+DQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgcm91dGVyTGluaz0iL21hcmtldHBsYWNlL2Nhc2VzdHVkaWVzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL3d5bXBMb2dvLnBuZyIgYWx0PSJXeW1wIENhc2UgU3R1ZHkiIC8+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+DQoNCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPC91bD4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L3NlY3Rpb24+DQoNCjwhLS08c2VjdGlvbiBjbGFzcz0iY2xvdWRBcHAgdGV4dC1jZW50ZXIgY29udGFpbmVyLWZsdWlkIj4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICA8aDI+RW50ZXJwcmlzZSBDbG91ZCBTb2x1dGlvbnM8L2gyPg0KICAgICAgICA8cD5XZSBlbmFibGUgZW50ZXJwcmlzZXMgdG8gYm9vc3QgdXAgdGhlaXIgYWdpbGl0eSBieSBsZXZlcmFnaW5nIGdyZWF0ZXIgYWNjZXNzaWJpbGl0eSwgaW1wcm92ZWQgbW9iaWxpdHksIGluY3JlYXNlZCBjb2xsYWJvcmF0aW9uLCBlbmhhbmNlZCBzY2FsYWJpbGl0eSwgcmVkdWNlZCBjb3N0LCBkZWVwZXIgZGF0YSBpbnNpZ2h0cywgYW5kIG1vcmUuIEZ1ZWwgeW91ciBidXNpbmVzcyBncm93dGggYnkgbGV2ZXJhZ2luZyBlbmQtdG8tZW5kIGNsb3VkIGNvbXB1dGluZyBzb2x1dGlvbnMgb2YgU3VwcG9ydCBNeSBDbG91ZC4gV2UgZGVsaXZlciBoaWdobHkgc2NhbGFibGUsIGZsZXhpYmxlLCBhbmQgc2VjdXJlIGNsb3VkIGFwcGxpY2F0aW9ucyB0byBlbmFibGUgb3VyIGNsaWVudHMgdG8gb3V0cGVyZm9ybSBjb21wZXRpdG9ycy48L3A+DQoNCiAgICAgICAgPHA+U3VwcG9ydCBNeSBDbG91ZHRlY2ggZGVmaW5lcyBhIGN1c3RvbWl6ZWQgY2xvdWQgY29uc3VsdGluZyBhcHByb2FjaCBkcml2ZW4gYnkgeW91ciBidXNpbmVzcyBnb2Fscy4gV2UgYnVpbGQgdGVjaG5vbG9neS1kcml2ZW4gYW5kIHJlc3VsdC1vcmllbnRlZCBhcHBsaWNhdGlvbnMgdXNpbmcgbWF0dXJlIHByb2Nlc3NlcyBhbmQgcHJvdmVuIHRlY2hub2xvZ2llcy48L3A+DQogICAgPC9kaXY+DQo8L3NlY3Rpb24+LS0+DQoNCjxzZWN0aW9uIGNsYXNzPSJsZXRzY29ubmVjdCByb3ciPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25lY3R0ZXh0Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDI+TG9va2luZyBmb3IgQ2xvdWQgRXhwZXJ0cz8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4gV2Ugd291bGQgYmUgZ2xhZCB0byBzZXJ2ZSB5b3UuDQogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIHJvdXRlckxpbms9Ii9tYXJrZXRwbGFjZS9jb250YWN0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bmNvbmVjdCI+TEVUJ1MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09OTkVDVDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvc2VjdGlvbj4NCjxzZWN0aW9uIGNsYXNzPSJjbG91ZC1hd3Nib3giPg0KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xvdWQtYXdzLWJveC1pbmZvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJjbG91ZEF3c0ljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvY2xvdWRGb3JtYXRpb25JY29uLnBuZyIgYWx0PSIiIC8+PC9pPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNlcnRpZmllZCBFeHBlcnRzPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpIGNsYXNzPSJjbG91ZEF3c0ljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvc3Vic2NyaXB0SWNvbi5wbmciIGFsdD0iIiAvPjwvaT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4xNSsgeWVhcnMgb2YgRXhwZXJpZW5jZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0iY2xvdWRBd3NJY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2luc3RhbmNlSWNvbi5wbmciIGFsdD0iIiAvPjwvaT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4xMDAwKyBTdWJzY3JpYmVyczwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0iY2xvdWRBd3NJY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL3RvdGFsQW1pSWNvbi5wbmciIGFsdD0iIiAvPjwvaT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DdXN0b21lciBPcmllbnRlZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0iY2xvdWRBd3NJY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2NvdW50eUljb24ucG5nIiBhbHQ9IiIgLz48L2k+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+SW5kdXN0cnktd2lkZSBFeHBlcmllbmNlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9zZWN0aW9uPg0KPC9kaXY+DQo="},null]}