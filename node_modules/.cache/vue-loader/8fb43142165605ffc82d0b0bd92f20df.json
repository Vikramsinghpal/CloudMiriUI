{"remainingRequest":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\src\\components\\DevOps.vue?vue&type=template&id=5bbe23e6&","dependencies":[{"path":"E:\\CloudMiriUI\\cloudmiriui\\src\\components\\DevOps.vue","mtime":1613452378606},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}