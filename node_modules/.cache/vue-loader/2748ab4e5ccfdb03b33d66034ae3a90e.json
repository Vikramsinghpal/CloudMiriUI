{"remainingRequest":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\CloudMiriUI\\cloudmiriui\\src\\components\\Application.vue?vue&type=template&id=b02fc960&","dependencies":[{"path":"E:\\CloudMiriUI\\cloudmiriui\\src\\components\\Application.vue","mtime":1612934351777},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CloudMiriUI\\cloudmiriui\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid3JhcHBlciIgfSwgWwogICAgX3ZtLl9tKDApLAogICAgX3ZtLlByb2R1Y3RDYXRlZ29yeUlkID09IDIKICAgICAgPyBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJjbG91ZEFwcCB0ZXh0LWNlbnRlciBjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgIF92bS5fbSgxKQogICAgICAgIF0pCiAgICAgIDogX3ZtLl9lKCksCiAgICBfdm0uUHJvZHVjdENhdGVnb3J5SWQgPT0gNAogICAgICA/IF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImNsb3VkQXBwIHRleHQtY2VudGVyIGNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgX3ZtLl9tKDIpCiAgICAgICAgXSkKICAgICAgOiBfdm0uX2UoKSwKICAgIF92bS5Qcm9kdWN0Q2F0ZWdvcnlJZCA9PSAxCiAgICAgID8gX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAiY2xvdWRBcHAgdGV4dC1jZW50ZXIgY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICBfdm0uX20oMykKICAgICAgICBdKQogICAgICA6IF92bS5fZSgpLAogICAgX3ZtLlByb2R1Y3RDYXRlZ29yeUlkID09IDUKICAgICAgPyBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJjbG91ZEFwcCB0ZXh0LWNlbnRlciBjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgIF92bS5fbSg0KQogICAgICAgIF0pCiAgICAgIDogX3ZtLl9lKCksCiAgICBfdm0uUHJvZHVjdENhdGVnb3J5SWQgPT0gNwogICAgICA/IF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImNsb3VkQXBwIHRleHQtY2VudGVyIGNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgX3ZtLl9tKDUpCiAgICAgICAgXSkKICAgICAgOiBfdm0uX2UoKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIgZmlsdGVyLWNvbnRhaW5lciIsIGF0dHJzOiB7IGlkOiAidGVzdDEiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX20oNiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNsZWFyZml4IiwgYXR0cnM6IHsgaWQ6ICJmaWx0ZXJzIiB9IH0sCiAgICAgICAgICAgIF92bS5fbChfdm0uQ2xvdWRQcm9kdWN0Q2F0ZWdvcmllcywgZnVuY3Rpb24oY2xvdWRQcm9kdWN0Q2F0ZWdvcnkpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoImxpIiwgeyBrZXk6IGNsb3VkUHJvZHVjdENhdGVnb3J5LlByb2R1Y3RDYXRlZ29yeUlkIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25Qcm9kdWN0Q2F0ZWdvcnlDbGljaygKICAgICAgICAgICAgICAgICAgICAgICAgICBjbG91ZFByb2R1Y3RDYXRlZ29yeS5Qcm9kdWN0Q2F0ZWdvcnlJZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzLyIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3VkUHJvZHVjdENhdGVnb3J5LlByb2R1Y3RDYXRlZ29yeUltYWdlKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiZ29vZ2xlIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgMAogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLlByb2R1Y3RDYXRlZ29yeUlkID09IDcKICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VhcmNoSW5uIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VhcmNoLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzZWFyY2giCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjgwJSIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAiU2VhcmNoIEhlcmUiIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnNlYXJjaCB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS5zZWFyY2ggPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX20oNykKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgbWItNSIgfSwgWwogICAgICAgIF92bS5Qcm9kdWN0Q2F0ZWdvcnlJZCA9PSAyCiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tZVNvb25NYWluIHBvcnRmb2xpbyA1IiB9LCBbX3ZtLl9tKDgpXSkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgX3ZtLlByb2R1Y3RDYXRlZ29yeUlkID09IDQKICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb21lU29vbk1haW4gcG9ydGZvbGlvIDciIH0sIFtfdm0uX20oOSldKQogICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBfdm0uUHJvZHVjdENhdGVnb3J5SWQgPT0gMQogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbWVTb29uTWFpbiBwb3J0Zm9saW8gNyIgfSwgW192bS5fbSgxMCldKQogICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBfdm0uUHJvZHVjdENhdGVnb3J5SWQgPT0gNQogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbWVTb29uTWFpbiBwb3J0Zm9saW8gNyIgfSwgW192bS5fbSgxMSldKQogICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBfdm0uUHJvZHVjdENhdGVnb3J5SWQgPT0gNwogICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIiwgYXR0cnM6IHsgaWQ6ICJwb3J0Zm9saW9saXN0IiB9IH0sCiAgICAgICAgICAgICAgX3ZtLl9sKF92bS5DbG91ZFByb2R1Y3RzLCBmdW5jdGlvbihjbG91ZFByb2R1Y3QpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGNsb3VkUHJvZHVjdC5QSUQsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8gMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtY2F0IjogIjIiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicG9ydGZvbGlvLXdyYXBwZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicG9ydGZvbGlvLWltZy13cmFwcGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogX3ZtLnBhdGggKyBjbG91ZFByb2R1Y3QuUHJvZHVjdExvZ28sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvdHRvbS1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoY2xvdWRQcm9kdWN0LlByb2R1Y3RUaXRsZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBsLTMgcHItMyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1zbS00IHRleHQtbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQ29udGVudFBsYWNlSG9sZGVyMV9ycHRBbGxDbG91ZFByb2R1Y3RzX2R2UHJvZHVjdFJhdGluZ18wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhjbG91ZFByb2R1Y3QuUHJvZHVjdFJhdGluZzEpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN0YXIiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS04IHRleHQtcmlnaHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhjbG91ZFByb2R1Y3QuUHJvZHVjdFN1YkNhdGVnb3J5TmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBvcnRmb2xpby1sYWJlbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFncyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKGNsb3VkUHJvZHVjdC5Qcm9kdWN0QWxpYXNBcnJheSwgZnVuY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5d29yZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInVsIiwgeyBrZXk6IGtleXdvcmQgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdihfdm0uX3Moa2V5d29yZCkpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiY2xlYXJmaXgiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8tYnRuIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIvcHJvZHVjdGRldGFpbHMiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG91ZFByb2R1Y3QuUGFnZU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwb3J0Zm9saW8tbGluayIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVmlldyBEZXRhaWxzIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgMAogICAgICAgICAgICApCiAgICAgICAgICA6IF92bS5fZSgpCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImxldHNjb25uZWN0IGNvbC1zbS0xMiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbmVjdHRleHQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxMiksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTMiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9jb250YWN0IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSBidG5jb25lY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTEVUJ1MgQ09OTkVDVCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl9tKDEzKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImlubkJhbm5lck1haW4gcm93IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIk91ciBjdXN0b20gb2ZmZXJpbmdzIG9uIENsb3VkIildKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiY2xvdWQtdGl0bGUiIH0sIFtfdm0uX3YoIkFXUyIpXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNsb3VkLXN1YmhlYWRpbmciIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFN1cHBvcnQgTXkgQ2xvdWQgaXMgYSBsZWFkaW5nIEFXUyBzZXJ2aWNlIHByb3ZpZGVyIGFuZCBjb21lcyBhbW9uZyB0b3AgNSBBV1MgbWFya2V0cGxhY2UgdmVuZG9ycyAmIHByb3ZpZGVzIGEgdmFyaWVkIHJhbmdlIG9mIHNlcnZpY2VzIGluY2x1ZGluZyBjbG91ZCBjb25zdWx0aW5nLCBtYW5hZ2VtZW50LCBhbmQgc3VwcG9ydCBzb2x1dGlvbnMuIEluIGFkZGl0aW9uIHRvIHRoaXMsIHdlIGhlbHAgYnVzaW5lc3NlcyB0byBncm93IHdpdGggZmFzdGVyIHBhY2Ugd2l0aCBBV1MgbWlncmF0aW9uLCBjb25maWd1cmF0aW9uLCBkZXBsb3ltZW50LCBpbXBsZW1lbnRhdGlvbiwgYW5kIG1vbml0b3JpbmcgdG8gZW5zdXJlIGEgc21vb3RoIGFuZCBzZWFtbGVzcyBjbG91ZCB0cmFuc2l0aW9uLiBTdXBwb3J0IE15IENsb3Vk4oCZcyB0ZWFtIGhhcyB0aGUgaW5jbHVzaW9uIG9mIGV4cGVydCBBV1MgY29uc3VsdGFudHMgYW5kIGRldmVsb3BlcnMgd2hvIGhhdmUgdGhlIHBvdGVudGlhbCBvZiBvcHRpbWl6aW5nIGFuZCBsZXZlcmFnaW5nIEFXUyBDbG91ZCB0byBhdWdtZW50IHByb2R1Y3Rpdml0eSBhbmQgZWZmaWNhY3kgb2YgdGhlIGNsaWVudOKAmXMgYnVzaW5lc3MuIFdlIHVuZGVyc3RhbmQgdGhlIEFXUyBtYXJrZXRwbGFjZSBhbG9uZyB3aXRoIHJlcXVpcmVtZW50cyBvZiB0aGUgY2xpZW50cyBhbmQgZXhjZWwgaW4gcHJvdmlkaW5nIHRoZSBtb3N0IG9wdGltaXplZCBzb2x1dGlvbnMgZm9yIHRoZW0uICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiY2xvdWQtdGl0bGUiIH0sIFtfdm0uX3YoIkFsaWJhYmEgQ2xvdWQiKV0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbG91ZC1zdWJoZWFkaW5nIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBTdXBwb3J0IE15IENsb3VkIGlzIGNvbnRlbXBsYXRlZCBhcyBvbmUgb2YgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgQWxpYmFiYSBjbG91ZCBzZXJ2aWNlIHBhcnRuZXJzIHdoaWNoIGhlbHAgeW91IHRvIGF0dGFpbiBmYXN0ZXIgcmVzdWx0cyBhbmQgZW5zdXJlcyBoaWdobHkgc3RhYmxlIGFwcGxpY2F0aW9ucyBhbmQgcmVsaWFibGUgZGF0YSBzdG9yYWdlLiBPdXIgdGVhbSBjb25zaXN0cyBvZiBleHBlcnRzIHRvIHByb3ZpZGUgeW91IHRoZSBiZXN0IHNlcnZpY2UgaW4gdGhlIGVudGlyZSBBbGliYWJhIGNsb3VkIG1hcmtldHBsYWNlLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImNsb3VkLXRpdGxlIiB9LCBbCiAgICAgICAgX3ZtLl92KCJTYWxlc2ZvcmNlIEFwcEV4Y2hhbmdlIikKICAgICAgXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNsb3VkLXN1YmhlYWRpbmciIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXBwRXhjaGFuZ2UgaXMgdGhlIGZhc3QgYW5kIGVhc3kgd2F5IHRvIGV4dGVuZCBTYWxlc2ZvcmNlLiBXaXRoIHRob3VzYW5kcyBvZiBzb2x1dGlvbnMgdGhhdCBpbnN0YWxsIGluIGp1c3QgYSBmZXcgY2xpY2tzLCB0aGVyZSdzIHNvbWV0aGluZyBmb3IgZXZlcnkgYnVzaW5lc3MgY2hhbGxlbmdlLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiY2xvdWQtdGl0bGUiIH0sIFtfdm0uX3YoIkdvb2dsZSBDbG91ZCIpXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNsb3VkLXN1YmhlYWRpbmciIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIExldOKAmXMgYnVpbGQgR29vZ2xlIENsb3VkIFNvbHV0aW9ucyB0aGF0IHdvcmsgZm9yIHlvdSBhcyBTdXBwb3J0IE15IENsb3VkIGlzIGNvbW1pdHRlZCB0byBoZWxwIHlvdSB0byByZXNvbHZlIGFsbCBraW5kIG9mIGJ1c2luZXNzIGNoYWxsZW5nZXMgd2l0aCBhbiBlYXNlIHRocm91Z2ggZ29vZ2xlIGNsb3VkLiBXZSBoYXZlIGV4dGVuc2l2ZSBleHBlcmllbmNlIGluIGVsaW1pbmF0aW5nIHRoZSByZXF1aXJlbWVudCBmb3IgY29zdGx5IHNlcnZlciBpbnN0YWxsYXRpb24gaW4gZ29vZ2xlIGNsb3VkIG1hcmtldHBsYWNlLiBBZGRpdGlvbmFsbHksIHdlIHByb3ZpZGUgZW5kLXRvLWVuZCBzZXJ2aWNlcyBhbmQgc29sdXRpb25zIHRvIGhlbHAgeW91IHRvIHRyYW5zZm9ybSB5b3VyIGJ1c2luZXNzIHdpdGggZnVsbCBzdWl0ZSBvZiBjbG91ZC1iYXNlZCBzZXJ2aWNlcyB0aHJvdWdoIEdvb2dsZSBjbG91ZCAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImNsb3VkLXRpdGxlIiB9LCBbX3ZtLl92KCJBenVyZSIpXSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNsb3VkLXN1YmhlYWRpbmciIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFN1cHBvcnQgTXkgQ2xvdWQgaXMga25vd24gZm9yIG9mZmVyaW5nIGVuZC10by1lbmQgc2VydmljZXMgYW5kIHByb2R1Y3RzIGZvciBidXNpbmVzc2VzIGJ1aWxkaW5nIGNvbXBsZXggYnVzaW5lc3Mgc29sdXRpb25zIHRoYXQgYWltIHRvIGxldmVyYWdlIHRoZSBwb3dlciBvZiBNaWNyb3NvZnQgQXp1cmUgYWxvbmcgd2l0aCBjbG91ZC1uYXRpdmUgY2FwYWJpbGl0aWVzLiBTdXBwb3J0IE15IENsb3VkIGlzIHlvdXIgb25lLXN0b3Agc2hvcCBmb3Igb3BlcmF0aW9ucyBhbmQgZGV2ZWxvcG1lbnQgZXhwZXJ0aXNlIGluIHRoZSBhenVyZSBtYXJrZXRwbGFjZS4gV2Ugb2ZmZXIgY29uc2lzdGVuY3kgYWNyb3NzIGNsb3VkcyB3aXRoIGZhbWlsaWFyIHRvb2xzIGFuZCByZXNvdXJjZXMgYW5kIGhlbHAgeW91IGRlZmluZSB5b3VyIGNsb3VkIHN0cmF0ZWd5OyB0aGVuIGhlbHAgeW91IGV4ZWN1dGUgaXQuIFdlIG9mZmVyIGdyZWF0IGF6dXJlIHNvbHV0aW9ucyB0byBoZWxwIHlvdSB0byBzY2FsZSB5b3VyIElUIHJlc291cmNlcyB1cCBhbmQgZG93biBhcyBwZXIgeW91ciBidXNpbmVzcyBuZWVkcy4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnRuLXdyYXBwZXIiIH0sIFsKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmFja0J0biBzd2l0Y2giLCBhdHRyczogeyBpZDogInRlc3QyIiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJhcnJvdyIgfSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiYSIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJjbGVhci1zZWFyY2giLCBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDp2b2lkKDApIiB9IH0sCiAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS10aW1lcyIgfSldCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tU0J4IiB9LCBbCiAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkNvbWluZyBTb29uIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkdpdmUgeW91ciBtaW5kIGEgcmVzdCBhbmQgc3RpY2sgdGlnaHQgYXMgd2UgYXJlIGdvaW5nIHRvIGxhdW5jaCBvdXIgY29tbW9kaW91cyByYW5nZSBvZiBtYW5hZ2VkIGFwcGxpY2F0aW9ucyBvbiBBd3MgQ2xvdWQgc29vbi4iCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb21TQngiIH0sIFsKICAgICAgX2MoImgyIiwgW192bS5fdigiQ29taW5nIFNvb24iKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiR2l2ZSB5b3VyIG1pbmQgYSByZXN0IGFuZCBzdGljayB0aWdodCBhcyB3ZSBhcmUgZ29pbmcgdG8gbGF1bmNoIG91ciBjb21tb2Rpb3VzIHJhbmdlIG9mIG1hbmFnZWQgYXBwbGljYXRpb25zIG9uIEFsaWJhYmEgQ2xvdWQgc29vbi4iCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb21TQngiIH0sIFsKICAgICAgX2MoImgyIiwgW192bS5fdigiQ29taW5nIFNvb24iKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiR2l2ZSB5b3VyIG1pbmQgYSByZXN0IGFuZCBzdGljayB0aWdodCBhcyB3ZSBhcmUgZ29pbmcgdG8gbGF1bmNoIG91ciBjb21tb2Rpb3VzIHJhbmdlIG9mIG1hbmFnZWQgYXBwbGljYXRpb25zIG9uIFNhbGVzZm9yY2Ugc29vbi4iCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb21TQngiIH0sIFsKICAgICAgX2MoImgyIiwgW192bS5fdigiQ29taW5nIFNvb24iKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiR2l2ZSB5b3VyIG1pbmQgYSByZXN0IGFuZCBzdGljayB0aWdodCBhcyB3ZSBhcmUgZ29pbmcgdG8gbGF1bmNoIG91ciBjb21tb2Rpb3VzIHJhbmdlIG9mIG1hbmFnZWQgYXBwbGljYXRpb25zIG9uIEdvb2dsZSBDbG91ZCBzb29uLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC05IiB9LCBbCiAgICAgIF9jKCJoMiIsIFsKICAgICAgICBfdm0uX3YoIiBMb29raW5nIGZvciBDbG91ZCBFeHBlcnRzPyAiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIldlIHdvdWxkIGJlIGdsYWQgdG8gc2VydmUgeW91LiAiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAiY2xvdWQtYXdzYm94IG1pcmlPbkFXU01haW4gY29sLXNtLTEyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjbG91ZC1hd3MtYm94LWhlYWQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvQW1hem9uTG9nby5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0xMiB0ZXh0LWNlbnRlciBtaXJpT25BV1MiIH0sIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBDbG91ZCBoYXMgYmVlbiB0aGUgY3J1eCBvZiBvdXIgc2VydmljZXMgYW5kIG9uZSBvZiBvdXIgY29yZSBjb21wZXRlbmNpZXMuIEJlaW5nIGEgdmFsdWVkIEFXUyBDbG91ZCBDb25zdWx0aW5nIFBhcnRuZXIsIHdlIGhhdmUgZGVwbG95ZWQgbW9yZSB0aGFuIDUwIGNsb3VkIHByb2plY3RzIG9uIEFtYXpvbiBjbG91ZC4gV2Ugbm93IGJyaW5nIG91ciBleHBlcnQgZW5naW5lZXJpbmcgc2tpbGxzIHRvIGJyaW5nIGVmZm9ydGxlc3MgY29uZmlndXJhdGlvbnMgdG8geW91ciBzZXJ2ZXIgbmVlZHM7IHRocm91Z2ggb3VyIEFNSeKAmXMgZXhjbHVzaXZlbHkgYXZhaWxhYmxlIG9uIEFXUyBNYXJrZXRwbGFjZS4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}